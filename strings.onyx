use core {array}
use core.intrinsics.types {type_is_struct}


last_index_of :: (s: str, substr: str) -> i32 {
    while i := s.count - 1; i >= 0 {
        defer i -= 1;

        while j := 0; j < substr.count {
            if s[i + j] != substr[j] {
                continue continue;
            }

            j += 1;
        }

        return i;
    }

    return -1;
}

find_last :: #match #local {}

#overload
find_last :: (arr: [] $T, value: T) -> i32 {
    for i: range.{arr.count, 0, -1} {
        if value == arr.data[i] do return i;
    }

    return -1;
}

#overload
find_last :: macro (arr: [] $T/type_is_struct, pred: Code) -> i32 {
    for i: range.{arr.count, 0, -1} {
        it := &arr[i];
        if #unquote pred(it) do return i;
    }

    return -1;
}

#overload
find_last :: macro (arr: [] $T, pred: Code) -> i32 {
    for i: range.{arr.count, 0, -1} {
        it := arr[i];
        if #unquote pred(it) do return i;
    }

    return -1;
}
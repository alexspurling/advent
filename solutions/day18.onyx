package day18

use canvas
use canvas {Colour}
use core.set
use common {Pos, Direction, printf}
use core.intrinsics.atomics {__atomic_wait, __atomic_notify, __atomic_cmpxchg, __atomic_store, __atomic_load}
use core.conv {parse_int}
use core.array
use core.string
use strings {toStr}
use core.iter
use core.math
use core.hash
use core.list


desc := "Calculate the volume of land that can be excavated by the digger following the given instructions.";

exampleInput := """R 6 (#70c710)
D 5 (#0dc571)
L 2 (#5713f0)
D 2 (#d2c081)
R 2 (#59c680)
D 2 (#411b91)
L 5 (#8ceee2)
U 2 (#caa173)
L 1 (#1b58a2)
U 2 (#caa171)
R 2 (#7807d2)
U 3 (#a77fa3)
L 2 (#015232)
U 2 (#7a21e3)""";


initialised := 0;


Instruction :: struct {
    direction: Direction;
    distance: i32;
    colour: Colour;
}

getDirection :: (d: u8) -> Direction {
    switch (d) {
        case 'U' do return Direction.NORTH;
        case 'D' do return Direction.SOUTH;
        case 'L' do return Direction.WEST;
        case 'R' do return Direction.EAST;
    }
    return Direction.UNKNOWN;
}

parseInstructionsPart1 :: (input: str) -> [..] Instruction {
    instructions := array.make(Instruction);

    for line: string.split(input, '\n') {
        items := string.split(line, ' ');

        direction := getDirection(items[0][0]);
        distance := cast(i32) parse_int(items[1]);

        r := cast(u8) parse_int(items[2][2 .. 4], 16);
        g := cast(u8) parse_int(items[2][4 .. 6], 16);
        b := cast(u8) parse_int(items[2][6 .. 8], 16);

        colour := Colour.{r, g, b, 255};

        instructions << Instruction.{direction, distance, colour};
    }

    return instructions;
}


Square :: struct {
    pos: Pos;
    colour: Colour;
}
#inject
Square.hash :: (s: Square) -> i32 {
    return hash.hash(s.pos);
}
#overload
hash.hash :: (s: Square) -> i32 {
    return hash.hash(s.pos);
}
#operator == (s1: Square, s2: Square) -> bool {
    return s1.pos == s2.pos;
}
#operator != (s1: Square, s2: Square) -> bool {
    return !(s1.pos == s2.pos);
}


grid: Set(Square);
instructions: [..] Instruction;
scaledInstructions: [..] Instruction;


setup :: () {
    if __atomic_cmpxchg(&initialised, 0, 1) == 0 {
        canvas.lock();

        set.free(&grid);
        // array.free(&instructions);

        // Set the params
        input := #file_contents "inputs/day18.txt";
        // input := exampleInput;
        instructions = parseInstructionsPart1(input);

        canvas.unlock();
    }
}

getNextPos :: (curPos: Pos, direction: Direction) -> Pos {
    switch direction {
        case Direction.NORTH {
            return Pos.{curPos.x, curPos.y - 1};
        }
        case Direction.SOUTH {
            return Pos.{curPos.x, curPos.y + 1};
        }
        case Direction.EAST {
            return Pos.{curPos.x + 1, curPos.y};
        }
        case Direction.WEST {
            return Pos.{curPos.x - 1, curPos.y};
        }
    }
    return curPos;
}

getRightPos :: (curPos: Pos, direction: Direction) -> Pos {
    switch direction {
        case Direction.NORTH {
            return Pos.{curPos.x + 1, curPos.y};
        }
        case Direction.SOUTH {
            return Pos.{curPos.x - 1, curPos.y};
        }
        case Direction.EAST {
            return Pos.{curPos.x, curPos.y + 1};
        }
        case Direction.WEST {
            return Pos.{curPos.x, curPos.y - 1};
        }
    }
    return curPos;
}

excavatePerimeter :: () -> i32 {
    numSquares := 0;
    pos := Pos.{0, 0};
    // Fill the grid with all the positions described by the instructions
    for instruction: instructions {
        for d: 0 .. cast(i32) instruction.distance {
            pos = getNextPos(pos, instruction.direction);
            set.insert(&grid, Square.{pos, instruction.colour});
        }
        numSquares += cast(i32) instruction.distance;
    }
    // printf("Exterior squares: {}\n", numSquares);
    return numSquares;
}

fill :: (start: Pos) -> i32 {

    numFilled := 0;

    fillSquare := Square.{start, GREY};
    if !set.has(&grid, fillSquare) {
        set.insert(&grid, fillSquare);
        numFilled += 1;
    }

    queue := list.make(Pos);
    list.push_begin(&queue, start);


    while (!list.empty(&queue)) {
        pos := list.pop_end(&queue);

        // Not putting this in a function call because that would require allocated and freeing memory for the array
        neighbours := .[Pos.{pos.x - 1, pos.y}, Pos.{pos.x, pos.y - 1}, Pos.{pos.x + 1, pos.y}, Pos.{pos.x, pos.y + 1}];
        for neighbour: neighbours {
            fillSquare := Square.{neighbour, GREY};
            if !set.has(&grid, fillSquare) {
                set.insert(&grid, fillSquare);
                list.push_begin(&queue, neighbour);
                numFilled += 1;
            }
        }
    }

    return numFilled;
}

GREY :: Colour.{50, 50, 50, 255};
TRANSPARENT :: Colour.{0, 0, 0, 0};

excavateInterior :: () -> i32 {
    numSquares := 0;
    pos := Pos.{0, 0};
    for instruction: instructions {
        for d: 0 .. cast(i32) instruction.distance {
            pos = getNextPos(pos, instruction.direction);
            // Check the position to the 'right' of this one to see if it is empty
            rightPos := getRightPos(pos, instruction.direction);

            fillSquare := Square.{rightPos, GREY};
            if !set.has(&grid, fillSquare) {
                numSquares += fill(rightPos);
            }
        }
    }
    // printf("Interior squares: {}\n", numSquares);
    return numSquares;
}

calculateDigVolume :: () -> i32 {
    numSquares := excavatePerimeter();
    numSquares += excavateInterior();
    return numSquares;
}

solve_part_1 :: () -> str {
    setup();
    canvas.lock();
    volume := calculateDigVolume();
    canvas.unlock();
    return toStr(volume);
}

getDirectionPart2 :: (d: u8) -> Direction {
    switch d {
        case '0' do return Direction.EAST;
        case '1' do return Direction.SOUTH;
        case '2' do return Direction.WEST;
        case '3' do return Direction.NORTH;
    }
    return Direction.UNKNOWN;
}

parseInstructionsPart2 :: (input: str) -> [..] Instruction {
    instructions := array.make(Instruction);

    for line: string.split(input, '\n') {
        items := string.split(line, ' ');

        direction := getDirectionPart2(items[2][7]);
        distance := cast(i32) parse_int(items[2][2 .. 7], 16);
        r := cast(u8) parse_int(items[2][2 .. 4], 16);
        g := cast(u8) parse_int(items[2][4 .. 6], 16);
        b := cast(u8) parse_int(items[2][6 .. 8], 16);

        colour := Colour.{r, g, b, 255};

        instructions << Instruction.{direction, distance, colour};
    }

    return instructions;
}

rects: [..] Rect;

setupPart2 :: () {
    if __atomic_cmpxchg(&initialised, 0, 1) == 0 {
        canvas.lock();

        set.free(&grid);
        // array.free(&instructions);

        // Set the params
        input := #file_contents "inputs/day18.txt";
        // input := exampleInput;
        instructions = parseInstructionsPart2(input);

        rects := array.make(Rect);

        canvas.unlock();
    }
}


MIN_INT := -2147483648;
MAX_INT := 2147483647;

calculateMinMax :: (instructions: [] Instruction) -> (i32, i32, i32, i32) {
    minX := MAX_INT;
    minY := MAX_INT;
    maxX := MIN_INT;
    maxY := MIN_INT;

    pos := Pos.{0, 0};
    for instruction: instructions {

        minX = math.min(minX, pos.x);
        minY = math.min(minY, pos.y);
        maxX = math.max(maxX, pos.x);
        maxY = math.max(maxY, pos.y);

        distance := instruction.distance;
        switch instruction.direction {
            case Direction.NORTH {
                pos = Pos.{pos.x, pos.y - distance};
            }
            case Direction.SOUTH {
                pos = Pos.{pos.x, pos.y + distance};
            }
            case Direction.EAST {
                pos = Pos.{pos.x + distance, pos.y};
            }
            case Direction.WEST {
                pos = Pos.{pos.x - distance, pos.y};
            }
        }
    }
    return minX, minY, maxX, maxY;
}

calculateVolume :: () -> u64 {
    minX, minY, maxX, maxY := calculateMinMax(instructions);

    width := maxX - minX + 1;
    height := maxY - minY + 1;

    totalVolume: u64 = 0;

    pos := Pos.{0, 0};
    for instruction: instructions {
        if instruction.direction == Direction.EAST {
            eastVolume := cast(u64) (height - (pos.y - minY)) * cast(u64) instruction.distance;
            totalVolume += eastVolume;
        } elseif instruction.direction == Direction.WEST {
            westVolume := cast(u64) (height - (pos.y - minY) - 1) * cast(u64) instruction.distance;
            totalVolume -= westVolume;

        } elseif instruction.direction == Direction.SOUTH {
            southDistance := instruction.distance;
            totalVolume += cast(u64) southDistance;
        }
        distance := instruction.distance;
        switch instruction.direction {
            case Direction.NORTH do pos = Pos.{pos.x, pos.y - distance};
            case Direction.SOUTH do pos = Pos.{pos.x, pos.y + distance};
            case Direction.EAST do pos = Pos.{pos.x + distance, pos.y};
            case Direction.WEST do pos = Pos.{pos.x - distance, pos.y};
        }
    }

    // Add 1 to account for the 0 base of the south distance calculation
    return totalVolume + 1;
}

Rect :: struct {
    pos1: Pos;
    pos2: Pos;
    colour: Colour;
}

calculateRects :: (instructions: [] Instruction, rects: &[..] Rect) {
    minX, minY, maxX, maxY := calculateMinMax(instructions);

    pos := Pos.{0, 0};
    for instruction: instructions {
        if instruction.direction == Direction.EAST {
            rectPos1 := Pos.{pos.x, pos.y};
            rectPos2 := Pos.{pos.x + instruction.distance, maxY};
            array.push(rects, Rect.{rectPos1, rectPos2, GREY});
        } elseif instruction.direction == Direction.WEST {
            rectPos1 := Pos.{pos.x - instruction.distance, pos.y};
            rectPos2 := Pos.{pos.x, maxY};
            array.push(rects, Rect.{rectPos1, rectPos2, TRANSPARENT});
        }
        distance := instruction.distance;
        switch instruction.direction {
            case Direction.NORTH do pos = Pos.{pos.x, pos.y - distance};
            case Direction.SOUTH do pos = Pos.{pos.x, pos.y + distance};
            case Direction.EAST do pos = Pos.{pos.x + distance, pos.y};
            case Direction.WEST do pos = Pos.{pos.x - distance, pos.y};
        }
    }
}

solve_part_2 :: () -> str {
    setupPart2();
    canvas.lock();
    volume := calculateVolume();
    canvas.unlock();
    return toStr(volume);
}


render :: (scale: i32, drawScale: i32) {

    canvas.lock();

    if __atomic_load(&initialised) == 1 {

        canvas.clear();

        margin := 10;

        // Scale the instructions for the purposes of rendering
        scaledInstructions := iter.as_iter(&instructions)
            |> iter.map((i, [scale]) => Instruction.{i.direction, i.distance / scale, i.colour})
            |> iter.to_array();
        defer array.free(&scaledInstructions);

        rects := array.make(Rect);
        defer array.free(&rects);
        calculateRects(scaledInstructions, &rects);

        minX, minY, maxX, maxY := calculateMinMax(scaledInstructions);

        rectsSorted := array.copy(rects);
        array.quicksort(rectsSorted, (r1, r2) => r1.pos1.y - r2.pos1.y);

        // Draw the rects
        for rect: rectsSorted {
            posX := margin + (rect.pos1.x - minX) * drawScale;
            posY := margin + (rect.pos1.y - minY) * drawScale;
            width := (rect.pos2.x - rect.pos1.x) * drawScale;
            height := (rect.pos2.y - rect.pos1.y) * drawScale;
            canvas.drawRect(posX, posY, width, height, rect.colour);
        }

        // Draw the edges
        pos := Pos.{0, 0};
        for instruction: scaledInstructions {
            // printf("Drawing instruction: {}\n", instruction);
            distance := instruction.distance;
            switch instruction.direction {
                case Direction.NORTH {
                    posX := margin + (pos.x - minX) * drawScale;
                    posY := margin + ((pos.y - distance) - minY) * drawScale;
                    width := drawScale;
                    height := distance * drawScale;
                    canvas.drawRect(posX, posY, width, height, instruction.colour);
                    pos = Pos.{pos.x, pos.y - distance};
                }
                case Direction.SOUTH {
                    posX := margin + (pos.x - minX) * drawScale;
                    posY := margin + (pos.y - minY) * drawScale;
                    width := drawScale;
                    height := distance * drawScale;
                    canvas.drawRect(posX, posY, width, height, instruction.colour);
                    pos = Pos.{pos.x, pos.y + distance};
                }
                case Direction.EAST {
                    posX := margin + (pos.x - minX) * drawScale;
                    posY := margin + (pos.y - minY) * drawScale;
                    width := distance * drawScale;
                    height := drawScale;
                    canvas.drawRect(posX, posY, width, height, instruction.colour);
                    pos = Pos.{pos.x + distance, pos.y};
                }
                case Direction.WEST {
                    posX := margin + ((pos.x - distance) - minX) * drawScale;
                    posY := margin + (pos.y - minY) * drawScale;
                    width := distance * drawScale;
                    height := drawScale;
                    canvas.drawRect(posX, posY, width, height, instruction.colour);
                    pos = Pos.{pos.x - distance, pos.y};
                }
            }
        }

        // Show the starting position
        posX := margin + (0 - minX) * drawScale;
        posY := margin + (0 - minY) * drawScale;
        canvas.drawRect(posX, posY, 5, 5, Colour.{255, 0, 0, 255});
    }

    canvas.unlock();
}

reset :: () {
    __atomic_store(&initialised, 0);
}

render_part_1 :: () {
    render(1, 2);
}

render_part_2 :: () {
    render(16000, 1);
}
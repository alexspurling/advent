use core.string
use core.string {split, split_iter, index_of}
use core.iter
use core {println, printf}
use core.conv {parse_int}
use core.math {sqrt}
use strings
use strings {toStr}


day6desc := "Calculate how many ways you can beat the record in each boat race."


calculateNumWays :: (time: i64, record: i64) -> i64 {

    // Minimum time to hold the button to beat the record
    sqrtValue := time * time - (4 * -1 * -record);

    if sqrtValue < 0 {
        printf("Oops, looks like this record is impossible! Time: {}, record: {}, sqrtValue: {}\n", time, record, sqrtValue);
        return 1;
    }
    recordStart: f64 = (cast(f64) (-time) + sqrt(cast(f64) sqrtValue)) / -2;
    recordEnd: f64 = (cast(f64) (-time) - sqrt(cast(f64) sqrtValue)) / -2;
    recordStartInt := cast(i64) recordStart;
    recordEndInt := cast(i64) recordEnd;
    numWays := recordEndInt - recordStartInt;

    return numWays;
}

solve_day_6_part_1 :: () -> str {
    lines := split(day6input, '\n');

    timesLine := lines[0][index_of(lines[0], ": ") + 2 .. lines[0].count];
    times := split_iter(timesLine, " ")
            |> iter.filter(x => !string.empty(x))
            |> iter.map(x => parse_int(x))
            |> iter.to_array();

    recordsLine := lines[1][index_of(lines[1], ": ") + 2 .. lines[1].count];
    records := split_iter(recordsLine, " ")
            |> iter.filter(x => !string.empty(x))
            |> iter.map(x => parse_int(x))
            |> iter.to_array();

    totalWays: i64 = 1;

    for gameNum: 0 .. times.count {
        time := times[gameNum];
        record := records[gameNum];

        totalWays = totalWays * calculateNumWays(time, record);
    }

    return toStr(totalWays);
}

solve_day_6_part_2 :: () -> str {
    lines := split(day6input, '\n');

    timesLine := lines[0][index_of(lines[0], ": ") + 2 .. lines[0].count];
    time := iter.as_iter(timesLine)
        |> iter.filter(x => strings.isDigit(x))
        |> iter.to_array()
        |> parse_int();

    recordsLine := lines[1][index_of(lines[1], ": ") + 2 .. lines[1].count];
    record := iter.as_iter(recordsLine)
        |> iter.filter(x => strings.isDigit(x))
        |> iter.to_array()
        |> parse_int();

    return toStr(calculateNumWays(time, record));
}

day6input := """Time:        44     70     70     80
Distance:   283   1134   1134   1491""";
package day19

use core.array
use core.string
use core.iter
use core.conv
use core.map
use strings {toStr}
use core.alloc
use core.math


desc := "Process all the machine parts according to the workflows."


Operator :: enum {
    LT;
    GT;
}


ImmediateAction :: enum {
    ACCEPT;
    REJECT;
}

// Action :: union {
//     Immediate: ImmediateAction;
//     Defer: str;
// }

// Action :: union {
//     action: str;
// }

BasicRule :: struct {
    prop: u8;
    operator: Operator;
    value: i32;
    action: str;
}

Rule :: union {
    Basic: BasicRule;
    action: str;
}

// getAction :: (input: str) -> Action {
//     // if input == "A" {
//     //     return Action.{Immediate = ImmediateAction.ACCEPT};
//     // } elseif input == "R" {
//     //     return Action.{Immediate = ImmediateAction.REJECT};
//     // }
//     // return Action.{Defer = input};
//     return Action.{action=input};
// }

getRule :: (input: str) -> Rule {
    if !string.contains(input, ':') {
        // a := getAction(input);
        return Rule.{action = input};
    }

    prop := input[0];
    operator := Operator.LT if input[1] == '<' else Operator.GT;
    valueAction := string.split(input[2 .. input.count], ':');
    value := cast(i32) conv.parse_int(valueAction[0]);
    // action := getAction(valueAction[1]);
    action := valueAction[1];

    return Rule.{Basic = .{prop, operator, value, action}};
}


getRules :: (input: str) -> [] Rule {
    return iter.as_iter(string.split(input, ','))
            |> iter.map(getRule)
            |> iter.to_array();
}


Flow :: struct {
    name: str;
    rules: [] Rule;
}

Part :: struct {
    x: i32;
    m: i32;
    a: i32;
    s: i32;
}

PartsAndFlows :: struct {
    flows: Map(str, Flow);
    parts: [] Part;
}

getFlows :: (input: str) -> Map(str, Flow) {
    lines := string.split(input, '\n');

    flows := map.make(str, Flow);
    for line: lines {
        nameAndRules := string.split(line, '{');
        name := nameAndRules[0];

        rules := getRules(nameAndRules[1][0 .. nameAndRules[1].count - 1]);

        flow := Flow.{name, rules};
        map.put(&flows, name, flow);
    }

    return flows;
}

getPart :: (input: str) -> Part {
    x := 0;
    m := 0;
    a := 0;
    s := 0;
    props := input[1 .. input.count - 1];
    for prop: string.split(props, ',') {
        value := cast(i32) conv.parse_int(prop[2 .. prop.count]);
        switch prop[0] {
            case 'x' do x = value;
            case 'm' do m = value;
            case 'a' do a = value;
            case 's' do s = value;
        }
    }
    return Part.{x, m, a, s};
}

getParts :: (input: str) -> [] Part {
    lines := string.split(input, '\n');

    return iter.as_iter(string.split(input, '\n'))
            |> iter.map(getPart)
            |> iter.to_array();
}

getPartsAndFlows :: (input: str) -> PartsAndFlows {
    input_split := string.split_iter(input, "\n\n");

    flows_input, cont1 := iter.take_one(input_split);
    parts_input, cont2 := iter.take_one(input_split);

    flows := getFlows(flows_input);
    parts := getParts(parts_input);

    return PartsAndFlows.{flows, parts};
}

evalOperator :: (value1: i32, operator: Operator, value2: i32) -> bool {
    switch operator {
        case Operator.LT {
            return value1 < value2;
        }
        case Operator.GT {
            return value1 > value2;
        }
    }
    return false;
}

evalRule :: (part: Part, rule: BasicRule) -> bool {
    switch rule.prop {
        case 'x' do return evalOperator(part.x, rule.operator, rule.value);
        case 'm' do return evalOperator(part.m, rule.operator, rule.value);
        case 'a' do return evalOperator(part.a, rule.operator, rule.value);
        case 's' do return evalOperator(part.s, rule.operator, rule.value);
    }
    return false;
}

process :: (partsAndFlows: PartsAndFlows) -> i32 {

    accepted := array.make(Part);

    iterCount := 0;
    for part: partsAndFlows.parts {
        // Start with the "in" workflow
        nextFlow := "in";
        partProcessed := false;
        while !partProcessed {
            iterCount += 1;
            flow := map.get(&partsAndFlows.flows, nextFlow)->unwrap();
            ruleProcessed := false;
            for rule: flow.rules {
                switch rule {
                    case br: .Basic {
                        if evalRule(part, br) {
                            switch br.action {
                                case "A" {
                                    accepted << part;
                                    partProcessed = true;
                                }
                                case "R" {
                                    partProcessed = true;
                                }
                                case #default {
                                    nextFlow = br.action;
                                }
                            }
                            ruleProcessed = true;
                        } else {
                        }
                    }
                    case #default {
                        switch rule.action->unwrap() {
                            case "A" {
                                accepted << part;
                                partProcessed = true;
                            }
                            case "R" {
                                partProcessed = true;
                            }
                            case #default {
                                nextFlow = rule.action->unwrap();
                            }
                        }
                        ruleProcessed = true;
                    }
                }
                if ruleProcessed {
                    break;
                }
            }
        }
    }

    return iter.as_iter(accepted)
        |> iter.map(p => p.x + p.m + p.a + p.s)
        |> iter.sum();
}

solve_part_1 :: () -> str {
    input := #file_contents "inputs/day19.txt";
    partsAndFlows := getPartsAndFlows(input);
    sumAcceptedParts := process(partsAndFlows);
    return toStr(sumAcceptedParts);
}


Range :: struct {
    min: i32; max: i32;
}

PartRanges :: struct {
    x: Range;
    m: Range;
    a: Range;
    s: Range;
}

getAcceptedPartRanges :: #match #local {}

#overload
getAcceptedPartRanges :: (flows: &Map(str, Flow)) -> u64 {
    return getAcceptedPartRanges(flows, "in",
        PartRanges.{Range.{1, 4000},
            Range.{1, 4000},
            Range.{1, 4000},
            Range.{1, 4000}});
}

oppositeRule :: (basicRule: BasicRule) -> BasicRule {
    if basicRule.operator == Operator.LT {
        return BasicRule.{basicRule.prop, Operator.GT, basicRule.value - 1, basicRule.action};
    } else {
        return BasicRule.{basicRule.prop, Operator.LT, basicRule.value + 1, basicRule.action};
    }
}

#overload
getAcceptedPartRanges :: (flows: &Map(str, Flow), name: str, inRanges: PartRanges) -> u64 {

    if name == "R" {
        return 0;
    } elseif name == "A" {
        product: u64 = 1;
        product *= cast(u64) (inRanges.x.max - inRanges.x. min + 1);
        product *= cast(u64) (inRanges.m.max - inRanges.m. min + 1);
        product *= cast(u64) (inRanges.a.max - inRanges.a. min + 1);
        product *= cast(u64) (inRanges.s.max - inRanges.s. min + 1);
        return product;
    }

    flow := map.get(flows, name)->unwrap();

    total: u64 = 0;

    for rule: flow.rules {
        switch rule {
            case br: .Basic {
                min: i32;
                max: i32;
                T: Range;
                F: Range;
                switch br.prop {
                    case 'x' {
                        min = inRanges.x.min;
                        max = inRanges.x.max;
                    }
                    case 'm' {
                        min = inRanges.m.min;
                        max = inRanges.m.max;
                    }
                    case 'a' {
                        min = inRanges.a.min;
                        max = inRanges.a.max;
                    }
                    case 's' {
                        min = inRanges.s.min;
                        max = inRanges.s.max;
                    }
                }
                switch br.operator {
                    case Operator.LT {
                        T = Range.{min, math.min(br.value - 1, max)};
                        F = Range.{math.max(br.value, min), max};
                    }
                    case Operator.GT {
                        T = Range.{math.max(br.value + 1, min), max};
                        F = Range.{min, math.min(br.value, max)};
                    }
                }
                if T.min <= T.max {
                    newRanges: PartRanges;
                    newRanges = inRanges;
                    switch br.prop {
                        case 'x' {
                            newRanges.x = T;
                            total += getAcceptedPartRanges(flows, br.action, newRanges);
                        }
                        case 'm' {
                            newRanges.m = T;
                            total += getAcceptedPartRanges(flows, br.action, newRanges);
                        }
                        case 'a' {
                            newRanges.a = T;
                            total += getAcceptedPartRanges(flows, br.action, newRanges);
                        }
                        case 's' {
                            newRanges.s = T;
                            total += getAcceptedPartRanges(flows, br.action, newRanges);
                        }
                    }
                }
                if F.min <= F.max {
                    newRanges: PartRanges;
                    newRanges = inRanges;
                    switch br.prop {
                        case 'x' {
                            newRanges.x = F;
                        }
                        case 'm' {
                            newRanges.m = F;
                        }
                        case 'a' {
                            newRanges.a = F;
                        }
                        case 's' {
                            newRanges.s = F;
                        }
                    }
                    inRanges = newRanges;
                }
            }
            case #default {
                total += getAcceptedPartRanges(flows, rule.action->unwrap(), inRanges);
            }
        }
    }
    return total;
}

solve_part_2 :: () -> str {
    input := #file_contents "inputs/day19.txt";
    partsAndFlows := getPartsAndFlows(input);
    acceptedParts := getAcceptedPartRanges(&partsAndFlows.flows);

    return toStr(acceptedParts);
}

exampleInput := """px{a<2006:qkq,m>2090:A,rfg}
pv{a>1716:R,A}
lnx{m>1548:A,A}
rfg{s<537:gd,x>2440:R,A}
qs{s>3448:A,lnx}
qkq{x<1416:A,crn}
crn{x>2662:A,R}
in{s<1351:px,qqz}
qqz{s>2770:qs,m<1801:hdj,R}
gd{a>3333:R,R}
hdj{m>838:A,pv}

{x=787,m=2655,a=1222,s=2876}
{x=1679,m=44,a=2067,s=496}
{x=2036,m=264,a=79,s=2244}
{x=2461,m=1339,a=466,s=291}
{x=2127,m=1623,a=2188,s=1013}""";

package day15

use core.slice
use core.conv
use core.array
use core.map
use core.string
use core {println, printf}
use strings {toStr, trim}

desc := "Calculate the HASH values and use these to place all the lenses in the correct boxes of the Lava Production Facility.";


HASH :: (string: str) -> i32 {
    curHash := 0;
    for c: string {
        curHash += cast(i32) c;
        curHash = curHash * 17;
        curHash = curHash % 256;
    }
    return curHash;
}

solve_part_1 :: () -> str {
    day15Input := #file_contents "inputs/day15.txt";
    input := trim(day15Input);
    instructions := string.split(input, ',');

    sumHash := 0;
    for instruction: instructions {
        sumHash += HASH(instruction);
    }

    return toStr(sumHash);
}

Lens :: struct {
    id: str;
    focalLength: i32;
}
#operator == (l1: Lens, l2: Lens) => {
    return l1.id == l2.id;
}

instructionHash :: (instruction: str) -> i32 {
    if instruction[instruction.length - 1] == '-' {
        return HASH(instruction[0 .. instruction.length - 2]);
    } else {
        return HASH(string.split(instruction, '=')[0]);
    }
    return -1;
}

installLens :: (boxes: &Map(i32, [..] Lens), instruction: str) {
    // Remove lens instruction
    if instruction[instruction.length - 1] == '-' {
        label := instruction[0 .. instruction.length - 1];

        hash := HASH(label);

        lensesOptional := map.get(boxes, hash);

        switch lensesOptional {
            case .None { }
            case lenses: .Some {
                lensToRemove := Lens.{label, 0};
                array.remove(&lenses, lensToRemove);
                map.put(boxes, hash, lenses);
            }
        }
    } else {
        instructionParts := string.split(instruction, '=');
        label := instructionParts[0];
        focalLength := cast(i32) conv.str_to_i64(instructionParts[1]);

        hash := HASH(label);

        lensesOptional := map.get(boxes, hash);

        switch lensesOptional {
            case .None {
                lenses := array.make(Lens);
                lenses << Lens.{label, focalLength};
                map.put(boxes, hash, lenses);
            }
            case lenses: .Some {
                lensToAdd := Lens.{label, focalLength};
                existingLensIdx := slice.find(lenses, lensToAdd);
                if existingLensIdx >= 0 {
                    lenses[existingLensIdx].focalLength = lensToAdd.focalLength;
                } else {
                    lenses << lensToAdd;
                    map.put(boxes, hash, lenses);
                }
            }
        }
    }
}

installLenses :: (boxes: &Map(i32, [..] Lens), instructions: [] str) {
    for instruction: instructions {
        installLens(boxes, instruction);
    }
    return;
}

calculateTotalFocusingPower :: (boxes: &Map(i32, [..] Lens)) -> i32 {
    totalFocusPower := 0;
    for box: map.as_iter(boxes) {
        entry := (*box);
        id := entry.key;
        lenses := entry.value;
        i := 1;
        for lens: lenses {
            focusingPower := (id + 1) * i * lens.focalLength;
            totalFocusPower += focusingPower;
            i += 1;
        }
    }
    return totalFocusPower;
}

solve_part_2 :: () -> str {
    day15Input := #file_contents "inputs/day15.txt";

    instructions := string.split(day15Input, ',');
    boxes := map.make(i32, [..] Lens);
    installLenses(&boxes, instructions);
    totalFocusPower := calculateTotalFocusingPower(&boxes);

    return toStr(totalFocusPower);
}

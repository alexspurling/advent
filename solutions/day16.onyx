package day16

use core.math
use core.list
use core.set
use core.slice
use core.conv
use core.array
use core.map
use core.string
use core.hash
use core {println, printf}
use strings {toStr, trim}
use common {Pos}


desc := "Find the cells energised by the laser beam.";

Direction :: enum {
    NORTH; SOUTH; EAST; WEST; UNKNOWN;
}
#inject
Direction.hash :: (d: Direction) -> u32 {
    return hash.hash(cast(u32) d);
}
#overload
hash.hash :: (d: Direction) -> u32 {
    return hash.hash(cast(u32) d);
}


getNextDirections :: (tile: u8, direction: Direction) -> (Direction, Direction) {
    switch tile {
        case '-' {
            if direction == Direction.NORTH || direction == Direction.SOUTH {
                return (Direction.WEST, Direction.EAST);
            }
        }
        case '|' {
            if direction == Direction.EAST || direction == Direction.WEST {
                return (Direction.NORTH, Direction.SOUTH);
            }
        }
        case '/' {
            switch direction {
                case Direction.NORTH do return (Direction.EAST, Direction.EAST);
                case Direction.SOUTH do return (Direction.WEST, Direction.WEST);
                case Direction.EAST do return (Direction.NORTH, Direction.NORTH);
                case Direction.WEST do return (Direction.SOUTH, Direction.SOUTH);
            }
        }
        case '\\' {
            switch direction {
                case Direction.NORTH do return (Direction.WEST, Direction.WEST);
                case Direction.SOUTH do return (Direction.EAST, Direction.EAST);
                case Direction.EAST do return (Direction.SOUTH, Direction.SOUTH);
                case Direction.WEST do return (Direction.NORTH, Direction.NORTH);
            }
        }
    }
    return (direction, direction);
}

getNextPos :: (pos: Pos, direction: Direction) -> Pos {
    switch direction {
        case Direction.NORTH do return Pos.{pos.x, pos.y - 1};
        case Direction.SOUTH do return Pos.{pos.x, pos.y + 1};
        case Direction.EAST do return Pos.{pos.x + 1, pos.y};
        case Direction.WEST do return Pos.{pos.x - 1, pos.y};
    }
    return pos;
}

PosAndDirection :: struct {
    pos: Pos;
    direction: Direction;
}

fireTheLasers :: (room: [] str, startPos: Pos, startDirection: Direction) -> Map(Pos, Set(Direction)) {

    grid := map.make(Pos, Set(Direction)); // For some reason we cannot create Maps or Sets of enums so we have to use the underlying value (u32)

    queue := list.make(PosAndDirection);

    queue.push_end(&queue, PosAndDirection.{startPos, startDirection});

    n := 0;

    while !list.empty(&queue) {
        curPosAndDirection := list.pop_begin(&queue);

        pos := curPosAndDirection.pos;
        direction := curPosAndDirection.direction;
        tile := room[pos.y][pos.x];

        printf("Pos: {}, dir: {}, tile: {}, n: {}\n", pos, direction, tile, n);

        if map.has(&grid, pos) {
            // the beam has already passed through this location. if we are currently going in the same direction then
            // we can stop iterating this branch.
            directionSet := map.get(&grid, pos)->unwrap();

            if set.has(&directionSet, direction) {
                // printf("Already explored this cell and direction\n");
                continue;
            }

            // Otherwise, simply add the current direction to the list.
            set.insert(&directionSet, direction);
        } else {
            // Add this beam to the energy grid
            directionSet := set.make(Direction);
            set.insert(&directionSet, direction);
            map.put(&grid, pos, directionSet);
        }

        dir1, dir2 := getNextDirections(tile, curPosAndDirection.direction);

        printf("Got dirs: {}, {}\n", dir1, dir2);

        nextDirections := .[dir1, dir2];

        for nextDirection: nextDirections {
            nextPos := getNextPos(pos, nextDirection);
            if nextPos.x >= 0 && nextPos.y >= 0 && nextPos.x < room[0].length && nextPos.y < room.length {
                queue.push_end(&queue, PosAndDirection.{nextPos, nextDirection});
            }
        }

        n += 1;
    }

    return grid;
}

countEnergisedCells :: (grid: &Map(Pos, Set(Direction))) -> i32 {
    totalCells := 0;
    for cell: map.as_iter(grid) {
        totalCells += cell.value.entries.count;
    }
    return totalCells;
}

solve_part_1 :: () -> str {
    day16Input := #file_contents "inputs/day16.txt";
    room := string.split(day16Input, '\n');
    grid := fireTheLasers(room, Pos.{0, 0}, Direction.EAST);
    energisedCells := countEnergisedCells(&grid);
    return toStr(energisedCells);
}

solve_part_2 :: () -> str {
    day16Input := #file_contents "inputs/day16.txt";
    room := string.split(day16Input, '\n');

    maxEnergisedCells := 0;
    for x: 36 .. room[0].length {
        dir := Direction.SOUTH;
        grid := fireTheLasers(room, Pos.{x, 0}, dir);
        energisedCells := countEnergisedCells(&grid);
        maxEnergisedCells = math.max(maxEnergisedCells, energisedCells);
        printf("x: {}, y: 0, dir: {}, energised cells: {}\n", x, dir, energisedCells);
    }

    for y: 0 .. room.length {
        dir := Direction.EAST;
        grid := fireTheLasers(room, Pos.{0, y}, dir);
        energisedCells := countEnergisedCells(&grid);
        maxEnergisedCells = math.max(maxEnergisedCells, energisedCells);
        printf("x: 0, y: {}, dir: {}, energised cells: {}\n", y, dir, energisedCells);
    }

    for x: 0 .. room[0].length {
        dir := Direction.NORTH;
        grid := fireTheLasers(room, Pos.{x, room.length}, dir);
        energisedCells := countEnergisedCells(&grid);
        maxEnergisedCells = math.max(maxEnergisedCells, energisedCells);
        printf("x: {}, y: {}, dir: {}, energised cells: {}\n", x, room.length, dir, energisedCells);
    }

    for y: 0 .. room.length {
        dir := Direction.WEST;
        grid := fireTheLasers(room, Pos.{room[0].length, y}, dir);
        energisedCells := countEnergisedCells(&grid);
        maxEnergisedCells = math.max(maxEnergisedCells, energisedCells);
        printf("x: {}, y: {}, dir: {}, energised cells: {}\n", room[0].length, y, dir, energisedCells);
    }

    return toStr(maxEnergisedCells);
}

exampleInput := """.|...\\....
|.-.\\.....
.....|-...
........|.
..........
.........\
..../.\\\\..
.-.-/..|..
.|....-|.\\
..//.|....""";
package common

use core.hash
use core.intrinsics.atomics {__atomic_wait, __atomic_notify, __atomic_cmpxchg, __atomic_store}
use core {print, printf}
use core.conv;
use core.io;


progress :: (p: f64) -> void  #foreign "host" "progress" ---


cmp :: (num1: $T, num2: T) -> i32 {
    return 0 if num1 == num2 else (-1) if num1 < num2 else 1;
}


Pos :: struct {
    x: i32;
    y: i32;
}
#inject
Pos.hash :: (p: Pos) -> i32 {
    return 31 * 31 * hash.hash(p.x) * hash.hash(p.y);
}
#overload
hash.hash :: (p: Pos) -> i32 {
    return 31 * 31 * hash.hash(p.x) * hash.hash(p.y);
}
#operator == (p1: Pos, p2: Pos) -> bool {
    return p1.x == p2.x && p1.y == p2.y;
}
#operator != (p1: Pos, p2: Pos) -> bool {
    return !(p1.x == p2.x && p1.y == p2.y);
}


Direction :: enum {
    NORTH; SOUTH; EAST; WEST; UNKNOWN;
}
#inject
Direction.hash :: (d: Direction) -> u32 {
    return hash.hash(cast(u32) d);
}
#overload
hash.hash :: (d: Direction) -> u32 {
    return hash.hash(cast(u32) d);
}
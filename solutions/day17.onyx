package day17

use core
use core.iter
use core.map
use core {println, printf}
use core.string
use core.array
use core.set
use core.hash
use core.conv {parse_int}
use strings {toStr}
use common {Pos, cmp, Direction, progress}
use core.heap
use canvas
use canvas {Colour}
use core.intrinsics.atomics {__atomic_wait, __atomic_notify, __atomic_cmpxchg, __atomic_store, __atomic_load}
use core.math


desc := "Find the best path to transport the lava crucible through the city from the laval pool to the machine parts factory."


MAX_INT :: 2147483647;


getCityCost :: (city: [] str, pos: Pos) -> i32 {
    costChar := city[pos.y][pos.x];
    costInt := cast(i32) costChar;
    return costInt - 48;
}

CrucibleState :: struct {
    pos: Pos;
    direction: Direction;
    numSteps: i32;
    distance: i32;
}
#operator == (p1: CrucibleState, p2: CrucibleState) -> bool {
    return p1.pos == p2.pos && p1.direction == p2.direction && p1.numSteps == p2.numSteps;
}
#inject
CrucibleState.hash :: (p: CrucibleState) -> u32 {
    return 31 * hash.hash(p.pos) * hash.hash(p.direction) * hash.hash(p.numSteps);
}
#overload
hash.hash :: (p: CrucibleState) -> u32 {
    return 31 * hash.hash(p.pos) * hash.hash(p.direction) * hash.hash(p.numSteps);
}

getDirection :: (curPos: Pos, nextPos: Pos) -> Direction {
    if curPos.y > nextPos.y {
        return Direction.NORTH;
    }
    if curPos.y < nextPos.y {
        return Direction.SOUTH;
    }
    if curPos.x < nextPos.x {
        return Direction.EAST;
    }
    return Direction.WEST;
}


city: [] str;
startPos: Pos;
targetPos: Pos;
distances : Map(CrucibleState, i32);
visited : Set(CrucibleState);
prev : Map(CrucibleState, CrucibleState);
queue : heap.Heap(CrucibleState);

// Variables used for visualisation
lastCrucibleState : CrucibleState;
recentlyUpdatedDistances: [..] Pos;
minDistances : Map(Pos, i32);

initialised := 0;


setup :: () {
    if __atomic_cmpxchg(&initialised, 0, 1) == 0 {
        canvas.lock();

        map.free(&distances);
        map.free(&prev);
        map.free(&minDistances);
        array.free(&queue.data);
        set.free(&visited);

        // Set the params
        input := #file_contents "inputs/day17.txt";
        city = string.split(input, '\n');
        startPos = Pos.{0, 0};
        targetPos = Pos.{city[0].length - 1, city.length - 1};

        // Initialise the search
        distances = map.make(CrucibleState, i32);
        visited = set.make(CrucibleState);
        prev = map.make(CrucibleState, CrucibleState);
        queue = heap.make(CrucibleState, (p1, p2) => cmp(p1.distance, p2.distance));
        queue << CrucibleState.{startPos, Direction.SOUTH, 0};
        queue << CrucibleState.{startPos, Direction.EAST, 0};

        minDistances = map.make(Pos, i32);
        map.put(&minDistances, startPos, 0);
        canvas.unlock();
    }
}

solve_part_1 :: () -> str {
    printf("Solving...\n");
    __atomic_store(&initialised, 0);
    setup();

    minSteps := 0;
    maxSteps := 3;
    numSteps := 0;
    while !array.empty(queue.data) {
        getShortestPathStep(minSteps, maxSteps);
        numSteps += 1;
        if numSteps % 1000 == 0 {
            // printf("distances: {}, visited: {}, prev: {}, queue: {}\n", distances.entries.count, visited.entries.count, prev.entries.count, queue.data.count);
            progress(cast(f64) numSteps / 9333.0);
        }
    }
    printf("Solved in {} steps\n", numSteps);
    return toStr(lastCrucibleState.distance);
}

solve_part_2 :: () -> str {
    printf("Solving...\n");
    __atomic_store(&initialised, 0);
    setup();

    minSteps := 4;
    maxSteps := 10;
    numSteps := 0;
    while !array.empty(queue.data) {
        getShortestPathStep(minSteps, maxSteps);
        numSteps += 1;
        if numSteps % 1000 == 0 {
            // printf("distances: {}, visited: {}, prev: {}, queue: {}\n", distances.entries.count, visited.entries.count, prev.entries.count, queue.data.count);
            progress(cast(f64) numSteps / 30339.0);
        }
    }
    printf("Solved in {} steps\n", numSteps);
    return toStr(lastCrucibleState.distance);
}


opposite :: (d: Direction) -> Direction {
    switch d {
        case Direction.NORTH do return Direction.SOUTH;
        case Direction.SOUTH do return Direction.NORTH;
        case Direction.EAST do return Direction.WEST;
        case Direction.WEST do return Direction.EAST;
    }
    return Direction.UNKNOWN;
}

NEIGHBOURS :: .[Pos.{0, 1}, Pos.{1, 0}, Pos.{0, -1}, Pos.{-1, 0}];

getShortestPathStep :: (minSteps: i32, maxSteps: i32) {
    canvas.lock();

    curState := heap.remove_top(&queue);

    lastCrucibleState = curState;

    if curState.pos == targetPos && curState.numSteps >= minSteps {
        printf("Found solution: {} with queue size {}\n", curState, queue.data.count);
        // map.put(&distances, curState, curState.distance);
        // empty the queue
        while !array.empty(queue.data) {
            heap.remove_top(&queue);
        }
    } elseif !set.has(&visited, curState) {
        set.insert(&visited, curState);

        curDirection := curState.direction;
        curDistance := curState.distance;

        neighbours: [4] Pos = NEIGHBOURS;
        for n: neighbours {
            neighbour := Pos.{curState.pos.x + n.x, curState.pos.y + n.y};
            if neighbour.x >= 0 && neighbour.x < city[0].count && neighbour.y >= 0 && neighbour.y < city.count {
                blockCost := getCityCost(city, neighbour);
                neighbourDistance := curDistance + blockCost;
                neighbourDirection := getDirection(curState.pos, neighbour);
                neighbourState: CrucibleState;

                if neighbourDirection == curDirection && curState.numSteps < maxSteps {
                    neighbourState = CrucibleState.{neighbour, neighbourDirection, curState.numSteps + 1, neighbourDistance};
                } elseif neighbourDirection != curDirection && neighbourDirection != opposite(curDirection) && curState.numSteps >= minSteps {
                    neighbourState = CrucibleState.{neighbour, neighbourDirection, 1, neighbourDistance};
                }
                queue << neighbourState;

                if neighbourDistance < map.get(&distances, neighbourState)->value_or(MAX_INT) {
                    map.put(&distances, neighbourState, neighbourDistance);
                    map.put(&prev, neighbourState, curState);
                }
                if neighbourDistance < map.get(&minDistances, neighbour)->value_or(MAX_INT) {
                    map.put(&minDistances, neighbour, neighbourDistance);
                }
            }
        }
    }

    canvas.unlock();
}

renderCell :: (posX: i32, posY: i32, distance: i32, colour: Colour) {
    if distance < 10 {
        canvas.drawChar('0', posX, posY, colour);
        canvas.drawChar(cast(u8) ('0' + distance), posX + 10, posY, colour);
    } elseif distance < 100 {
        canvas.drawChar(cast(u8) ('0' + distance / 10), posX, posY, colour);
        canvas.drawChar(cast(u8) ('0' + distance % 10), posX + 10, posY, colour);
    } elseif distance < 1000 {
        canvas.drawChar(cast(u8) ('0' + distance / 100), posX - 5, posY, colour);
        canvas.drawChar(cast(u8) ('0' + (distance / 10) % 10), posX + 5, posY, colour);
        canvas.drawChar(cast(u8) ('0' + distance % 10), posX + 15, posY, colour);
    }
}


gradientYellowRed := .[Colour.{255, 255, 0, 255}, Colour.{255, 0, 0, 255}];
gradientGreyToGrey := .[Colour.{50, 50, 50, 255}, Colour.{200, 200, 200, 255}];

colourFromGradient :: (value: i32, maxValue: i32, gradient: [] Colour) -> Colour {
    clampedValue := math.max(math.min(value, maxValue), 0);
    normalised := cast(f64) clampedValue / cast(f64) maxValue;
    index := cast(i32) (normalised * cast(f64) (gradient.count - 1));
    left := gradient[index];
    right := gradient[index + 1];
    valuePerColour := cast(i32) (cast(f64) maxValue / cast(f64) (gradient.count - 1));
    weight := cast(f64) (clampedValue % valuePerColour) / cast(f64) valuePerColour;

    r := cast(u8) cast(i32) (cast(f64) (cast(i32) left.r) * (1 - weight) + (cast(f64) (cast(i32) right.r)) * weight);
    g := cast(u8) cast(i32) (cast(f64) (cast(i32) left.g) * (1 - weight) + (cast(f64) (cast(i32) right.g)) * weight);
    b := cast(u8) cast(i32) (cast(f64) (cast(i32) left.b) * (1 - weight) + (cast(f64) (cast(i32) right.b)) * weight);
    return Colour.{r, g, b, 255};
}


scale := 5;


render :: () {

    canvas.lock();

    if __atomic_load(&initialised) == 1 {

        canvas.clear();

        // Render all calculated distances
        for y: 0 .. city.count {
            for x: 0 .. city[0].count {
                pos := Pos.{x, y};

                distance := map.get(&minDistances, pos);

                if !(distance == .None) {
                    posX := 22 + x * scale;
                    posY := 22 + y * scale;

                    colour := colourFromGradient(distance->unwrap(), 1024, gradientGreyToGrey);
                    canvas.drawRect(posX, posY, scale, scale, colour);
                }
            }
        }

        // Render most recent state
        posX := 22 + lastCrucibleState.pos.x * scale;
        posY := 22 + lastCrucibleState.pos.y * scale;
        canvas.drawRect(posX, posY, scale, scale, Colour.{255, 0, 0, 255});

        // Draw the path to the most recent state
        initialState := CrucibleState.{startPos, Direction.UNKNOWN, 0};
        prevState := map.get(&prev, lastCrucibleState)->value_or(initialState);

        pathLength := 0;
        while prevState.pos != Pos.{0, 0} && pathLength < 1024 {
            posX := 22 + prevState.pos.x * scale;
            posY := 22 + prevState.pos.y * scale;

            colour := colourFromGradient(prevState.distance, 1024, gradientYellowRed);
            canvas.drawRect(posX, posY, scale, scale, colour);
            prevState = map.get(&prev, prevState)->value_or(initialState);
            pathLength += 1;
        }

    } else {
        printf("Trying to render while uninitialised\n");
    }

    canvas.unlock();
}


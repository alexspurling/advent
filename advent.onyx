use core {println, printf}

#load "solutions/day1.onyx"
#load "solutions/day2.onyx"
#load "solutions/day3.onyx"
#load "solutions/day4.onyx"
#load "solutions/day5.onyx"
#load "solutions/day6.onyx"
#load "solutions/day7.onyx"
#load "solutions/day8.onyx"
#load "solutions/day9.onyx"
#load "solutions/day10.onyx"
#load "solutions/day11.onyx"
#load "solutions/day12.onyx"
#load "solutions/day13.onyx"

#export "_initialize" _initialize
_initialize :: () {
    use runtime;
    runtime.__runtime_initialize();
    context.thread_id = 0;
}

#export "describe" describe
describe :: (day: i32) -> &str {
    switch day {
        case 1 do return &day1desc;
        case 2 do return &day2desc;
        case 3 do return &day3desc;
        case 4 do return &day4desc;
        case 5 do return &day5desc;
        case 6 do return &day6desc;
        case 7 do return &day7desc;
        case 8 do return &day8desc;
        case 9 do return &day9desc;
        case 10 do return &day10desc;
        case 11 do return &day11desc;
        case 12 do return &day12desc;
        case 13 do return &day13desc;
    }
}

progress :: (p: f64) -> void  #foreign "host" "progress" ---


DayPart :: struct {day, part: i32;};
#operator == (d1, d2: DayPart) => d1.day == d2.day && d1.part == d2.part;


#export "solve" solve
solve :: (day: i32, part: i32) -> &str {
    solution: str;
    switch DayPart.{day, part} {
        case .{1, 1} do solution = solve_day_1_part_1();
        case .{1, 2} do solution = solve_day_1_part_2();
        case .{2, 1} do solution = solve_day_2_part_1();
        case .{2, 2} do solution = solve_day_2_part_2();
        case .{3, 1} do solution = solve_day_3_part_1();
        case .{3, 2} do solution = solve_day_3_part_2();
        case .{4, 1} do solution = solve_day_4_part_1();
        case .{4, 2} do solution = solve_day_4_part_2();
        case .{5, 1} do solution = solve_day_5_part_1();
        case .{5, 2} do solution = solve_day_5_part_2();
        case .{6, 1} do solution = solve_day_6_part_1();
        case .{6, 2} do solution = solve_day_6_part_2();
        case .{7, 1} do solution = solve_day_7_part_1();
        case .{7, 2} do solution = solve_day_7_part_2();
        case .{8, 1} do solution = solve_day_8_part_1();
        case .{8, 2} do solution = solve_day_8_part_2();
        case .{9, 1} do solution = solve_day_9_part_1();
        case .{9, 2} do solution = solve_day_9_part_2();
        case .{10, 1} do solution = solve_day_10_part_1();
        case .{10, 2} do solution = solve_day_10_part_2();
        case .{11, 1} do solution = solve_day_11_part_1();
        case .{11, 2} do solution = solve_day_11_part_2();
        case .{12, 1} do solution = solve_day_12_part_1();
        case .{12, 2} do solution = solve_day_12_part_2();
        case .{13, 1} do solution = solve_day_13_part_1();
        case .{13, 2} do solution = solve_day_13_part_2();
    }
    return &solution;
}

main :: () {
    printf("Solution: {}\n", *solve(11, 2));
}